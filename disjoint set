class DisjointSet{
public:
vector<int>parent,size;
DisjointSet(int n){ //n-> no of nodes initially
parent.resize(n+1);
size.resize(n+1);
for(int i=0;i<=n;i++){
parent[i]=i;
size[i]=1;
}
}
int findUtimateParent(int node){
if(node==parent[node]) return node;
return parent[node]=findUtimateParent(parent[node]);
}

//using size method
void unionBySize(int u,int v){
int ultimateParent_u=findUtimateParent(u);
int ultimateParent_v=findUtimateParent(v);
if(ultimateParent_u==ultimateParent_v) return;
if(size[ultimateParent_u]<size[ultimateParent_v]){
  parent[ultimateParent_u]=ultimateParent_v;
  size[ultimateParent_v]+=size[ultimateParent_u]; //size will increase everytime
}
else{
 parent[ultimateParent_v]=ultimateParent_u;
  size[ultimateParent_u]+=size[ultimateParent_v]; //size will increase everytime
     }
  }
};

















